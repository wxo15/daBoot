@model List<daBoot.Controllers.TicketController.StackedViewModel>
@{
    var assignedticketlst = ViewData["assignedticketlst"] as List<daBoot.Controllers.TicketController.StackedViewModel>;
    var XLabels = Newtonsoft.Json.JsonConvert.SerializeObject(assignedticketlst.FirstOrDefault().LstData.Select(x => x.DimensionOne).ToList());
    var YValues = Newtonsoft.Json.JsonConvert.SerializeObject(assignedticketlst.Select(x => x.LstData.Select(w => w.Quantity)).ToList());
    var label1 = Newtonsoft.Json.JsonConvert.SerializeObject(assignedticketlst.Select(x => x.StackedDimensionOne).ToList());
    var rolepie = ViewData["rolepie"] as List<daBoot.Controllers.TicketController.ChartSubModel>;
    var RolePieXLabels = Newtonsoft.Json.JsonConvert.SerializeObject(rolepie.Select(x => x.DimensionOne).ToList());
    var RolePieYValues = Newtonsoft.Json.JsonConvert.SerializeObject(rolepie.Select(x => x.Quantity).ToList());
    var submittedticketpie = ViewData["submittedticketpie"] as List<daBoot.Controllers.TicketController.ChartSubModel>;
    var SubmittedTicketPieXLabels = Newtonsoft.Json.JsonConvert.SerializeObject(submittedticketpie.Select(x => x.DimensionOne).ToList());
    var SubmittedTicketPieYValues = Newtonsoft.Json.JsonConvert.SerializeObject(submittedticketpie.Select(x => x.Quantity).ToList());
    ViewData["Title"] = "Dashboard";
}


<div class="row display-flex">
    <div class="col-12 col-lg-6">
        <div class="card chart-item">
            <h3>My Assigned Tickets</h3>
            <div style="height: 100%">
                <canvas id="stackedAssignedTickets"> </canvas>
            </div>
        </div>
    </div>
    <div class="col-12 col-lg-6">
        <div class="card chart-item">
            <h3>My Roles</h3>
            <div style="height: 100%">
                <canvas id="rolepiechart"> </canvas>
            </div>
        </div>
    </div>
</div>
<div class="row display-flex">
    <div class="col-12 col-lg-6 offset-lg-3">
        <div class="card chart-item">
            <h3>My Submitted Tickets</h3>
            <div style="height: 100%">
                <canvas id="submittedticketpiechart"> </canvas>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
<script type="text/javascript">
 $(function() {
     // populate stacked Assigned tickets
     var ctx = document.getElementById("stackedAssignedTickets").getContext('2d');
    var XLabels = @Html.Raw(XLabels);
    var YValues = @Html.Raw(YValues);
    var label = @Html.Raw(label1);
    var aux = 0;
    var barChartData = {
        labels: @Html.Raw(label1),
        datasets: []
    }
    XLabels.forEach(function(a, i) {
        var data = [];
        YValues.forEach(function(a, i) {
            data.push(a[aux]);
        });
        barChartData.datasets.push({
            label: XLabels[aux],
            backgroundColor: set_rgba(XLabels[aux]),
            data: data,
            borderWidth: 0
        });
        aux++;
    });

    var options = {
        maintainAspectRatio: false,
        scales: {
            yAxes: [{
                ticks: {
                    min: 0,
                    beginAtZero: true,
                    callback: function (value) { if (value % 1 === 0) { return value; } }
                },
                stacked: true,
                gridLines: {
                    display: false,
                    color: 'black',
                    lineWidth: 3
                }
            }],
            xAxes: [{
                stacked: true,
                gridLines: {
                    display: false,
                    color: 'black',
                    lineWidth: 3
                }
            }]
        }
    };


     function set_rgba(dimension) {
         if (dimension == "High") {
             return 'rgba(255, 0, 0, 1)';
         } else if (dimension == "Medium") {
             return 'rgba(255, 212, 42, 1)';
         } else {
             return 'rgba(0, 212, 85, 1)';
         };
     };
     var assignedticketchart = new Chart(ctx, {
         options: options,
         data: barChartData,
         type: 'bar'
     });
     rolepiechart

     var ctx = document.getElementById("rolepiechart").getContext('2d');
        var data = {
                labels: @Html.Raw(RolePieXLabels),
                datasets: [{
                    label: "Roles Chart",
                    backgroundColor: [
                        'rgba(255, 0, 0, 1)',
                        'rgba(255, 212, 42, 1)',
                        'rgba(0, 212, 85, 1)'
                    ],
                    borderWidth: 0,
                    data: @Html.Raw(RolePieYValues)
                }]
        };

        var options = {
            maintainAspectRatio: false
        };

       var rolepiechart = new  Chart(ctx, {
            options: options,
            data: data,
            type:'doughnut'
       });

     var ctx = document.getElementById("submittedticketpiechart").getContext('2d');
        var data = {
                labels: @Html.Raw(SubmittedTicketPieXLabels),
                datasets: [{
                    label: "Submitted Ticket Chart",
                    backgroundColor: [
                        'rgba(0, 191, 255, 1)',
                        'rgba(255, 0, 0, 1)',
                        'rgba(169, 169, 169, 1)',
                        'rgba(255, 212, 42, 1)',
                        'rgba(0, 212, 85, 1)'
                    ],
                    borderWidth: 0,
                    data: @Html.Raw(SubmittedTicketPieYValues)
                }]
        };

        var options = {
            maintainAspectRatio: false
        };

       var rolepiechart = new  Chart(ctx, {
            options: options,
            data: data,
            type:'doughnut'
       });

 });
</script>  